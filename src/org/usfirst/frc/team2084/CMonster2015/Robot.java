/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015;

import org.usfirst.frc.team2084.CMonster2015.commands.LoggingCommand;
import org.usfirst.frc.team2084.CMonster2015.subsystems.ContainerHookSubsystem;
import org.usfirst.frc.team2084.CMonster2015.subsystems.DriveSubsystem;
import org.usfirst.frc.team2084.CMonster2015.subsystems.ToteLifterSubsystem;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    private Command autonomousCommand;
    private Command loggingCommand;

    public static OI oi;
    public static PowerDistributionPanel pdp;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSubsystem driveSubsystem;
    public static ToteLifterSubsystem toteLifterSubsystem;
    public static ContainerHookSubsystem containerHookSubsystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * Called when the robot is first started up and should be used for any
     * initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystem = new DriveSubsystem();
        toteLifterSubsystem = new ToteLifterSubsystem();
        containerHookSubsystem = new ContainerHookSubsystem();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        oi = new OI();
        pdp = new PowerDistributionPanel();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        loggingCommand = new LoggingCommand();
        loggingCommand.start();
    }

    /**
     * Called at the beginning of autonomous.
     */
    @Override
    public void autonomousInit() {
    }

    /**
     * Called periodically during autonomous.
     */
    @Override
    public void autonomousPeriodic() {
        // Run the command scheduler
        Scheduler.getInstance().run();
    }

    /**
     * Called at the beginning of teleop.
     */
    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
        Robot.driveSubsystem.getMecanumDriveAlgorithm().resetGyro();
    }

    /**
     * Called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {
        // Run the command scheduler
        Scheduler.getInstance().run();
    }

    /**
     * Called periodically during test mode.
     */
    @Override
    public void testPeriodic() {
        LiveWindow.run();
    }

    /**
     * Called when the robot is disabled.
     */
    @Override
    public void disabledInit() {
    }

    /**
     * Called periodically while the robot is disabled.
     */
    @Override
    public void disabledPeriodic() {
        // Run the command scheduler
        Scheduler.getInstance().run();
    }
}
