/* 
 * Copyright (c) 2014 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc2084.CMonster2015.subsystems;

import org.usfirst.frc2084.CMonster2015.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class SweeperSubsystem extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Solenoid solenoid = RobotMap.sweeperSubsystemSolenoid;
	SpeedController jaguar = RobotMap.sweeperSubsystemJaguar;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public final double MOTOR_SPEED = 1.0;
	private MotorState state = MotorState.OFF;

	public static class MotorState {
		public final int state;

		private MotorState(int state) {
			this.state = state;
		}

		public static final int SWEEPING_VALUE = 0;
		public static final int OFF_VALUE = 1;
		public static final int EJECTING_VALUE = 2;
		public static final MotorState SWEEPING = new MotorState(SWEEPING_VALUE);
		public static final MotorState OFF = new MotorState(OFF_VALUE);
		public static final MotorState EJECTING = new MotorState(EJECTING_VALUE);

		public int hashCode() {
			int hash = 7;
			hash = 71 * hash + this.state;
			return hash;
		}

		public boolean equals(Object obj) {
			if (obj == null) {
				return false;
			}
			if (getClass() != obj.getClass()) {
				return false;
			}
			final MotorState other = (MotorState) obj;
			return this.state == other.state;
		}
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	}

	public void extend() {
		solenoid.set(true);
	}

	public void retract() {
		solenoid.set(false);
	}

	public void sweep() {
		jaguar.set(MOTOR_SPEED);
		state = MotorState.SWEEPING;
	}

	public void off() {
		jaguar.set(0);
		state = MotorState.OFF;
	}

	public void eject() {
		jaguar.set(-MOTOR_SPEED);
		state = MotorState.EJECTING;
	}

	public MotorState getState() {
		return state;
	}

	public boolean isExtended() {
		return solenoid.get();
	}
}
