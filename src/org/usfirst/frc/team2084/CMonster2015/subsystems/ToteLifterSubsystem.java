/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.subsystems;

import org.usfirst.frc.team2084.CMonster2015.RobotMap;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.MotorSafety;
import edu.wpi.first.wpilibj.MotorSafetyHelper;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 * The subsystem that controls the tote lifter.
 */
public class ToteLifterSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Solenoid raiseSolenoid = RobotMap.toteLifterSubsystemRaiseSolenoid;
    Solenoid lowerSolenoid = RobotMap.toteLifterSubsystemLowerSolenoid;
    Solenoid gateSolenoid = RobotMap.toteLifterSubsystemGateSolenoid;
    DigitalInput ejectorExtendedLimitSwitch = RobotMap.toteLifterSubsystemEjectorExtendedLimitSwitch;
    DigitalInput ejectorRetractedLimitSwitch = RobotMap.toteLifterSubsystemEjectorRetractedLimitSwitch;
    SpeedController ejectorTalon = RobotMap.toteLifterSubsystemEjectorTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final MotorSafetyHelper watchdog = new MotorSafetyHelper((MotorSafety) ejectorTalon);

    public enum LifterState {
        RAISED(true, false),
        LOWERED(false, false);

        private final boolean raiseValue;
        private final boolean lowerValue;

        private LifterState(boolean raiseValue, boolean lowerValue) {
            this.raiseValue = raiseValue;
            this.lowerValue = lowerValue;
        }
    }

    private LifterState lifterState;

    public void setLifterState(LifterState state) {
        lifterState = state;
        raiseSolenoid.set(state.raiseValue);
        lowerSolenoid.set(state.lowerValue);
    }

    public LifterState getLifterState() {
        return lifterState;
    }

    public enum GateState {
        OPEN(true),
        CLOSED(false);

        private final boolean value;

        private GateState(boolean value) {
            this.value = value;
        }
    }

    private GateState gateState;

    public void setGateState(GateState state) {
        gateState = state;
        gateSolenoid.set(state.value);
    }

    public GateState getGateState() {
        return gateState;
    }

    public enum EjectorState {
        EXTENDING(1.0),
        RETRACTING(-1.0),
        STOPPED(0.0);

        private final double speed;

        private EjectorState(double speed) {
            this.speed = speed;
        }
    }

    private EjectorState ejectorState;

    public void setEjectorState(EjectorState state) {
        ejectorState = state;

        watchdog.setSafetyEnabled(state != EjectorState.STOPPED);
        ejectorTalon.set(state.speed);
    }

    public EjectorState getEjectorState() {
        return ejectorState;
    }

    public boolean isEjectorExtended() {
        return ejectorExtendedLimitSwitch.get();
    }

    public boolean isEjectorRetracted() {
        return ejectorRetractedLimitSwitch.get();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
}
