/* 
 * Copyright (c) 2014 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.subsystems;

import org.usfirst.frc.team2084.CMonster2015.RobotMap;
import org.usfirst.frc.team2084.CMonster2015.commands.FieldCentricMecanumDriveCommand;
import org.usfirst.frc.team2084.CMonster2015.drive.ArcadeDriveAlgorithm;
import org.usfirst.frc.team2084.CMonster2015.drive.FourWheelDriveController;
import org.usfirst.frc.team2084.CMonster2015.drive.GyroMecanumDriveAlgorithm;
import org.usfirst.frc.team2084.CMonster2015.drive.WheelController;

import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SynchronizedRadianGyro;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;

/**
 * @author Ben Wolsieffer
 */
public class DriveSubsystem extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontLeftJaguar = RobotMap.driveSubsystemFrontLeftJaguar;
    SpeedController frontRightJaguar = RobotMap.driveSubsystemFrontRightJaguar;
    SpeedController rearLeftJaguar = RobotMap.driveSubsystemRearLeftJaguar;
    SpeedController rearRightJaguar = RobotMap.driveSubsystemRearRightJaguar;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	SynchronizedRadianGyro gyro = RobotMap.driveSubsystemGyro;
	private final Accelerometer accelerometer = RobotMap.driveSubsystemAccelerometer;
	private final WheelController<SpeedController> frontLeftWheel = new WheelController<>(frontLeftJaguar);
	private final WheelController<SpeedController> frontRightWheel = new WheelController<>(frontRightJaguar);
	private final WheelController<SpeedController> rearLeftWheel = new WheelController<>(rearLeftJaguar);
	private final WheelController<SpeedController> rearRightWheel = new WheelController<>(rearRightJaguar);
	private final FourWheelDriveController<WheelController<SpeedController>> driveController = new FourWheelDriveController<>(frontLeftWheel, frontRightWheel, rearLeftWheel, rearRightWheel);
	private final GyroMecanumDriveAlgorithm<WheelController<SpeedController>> mecanumDriveAlgorithm = new GyroMecanumDriveAlgorithm<>(driveController, RobotMap.driveSubsystemGyro);
	private final ArcadeDriveAlgorithm arcadeDriveAlgorithm = new ArcadeDriveAlgorithm(driveController);

	public DriveSubsystem() {
		frontRightWheel.setInverted(true);
		rearRightWheel.setInverted(true);
	}

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new FieldCentricMecanumDriveCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		gyro.setPIDSourceParameter(PIDSource.PIDSourceParameter.kAngle);
	}

	public GyroMecanumDriveAlgorithm<WheelController<SpeedController>> getMecanumDriveAlgorithm() {
		return mecanumDriveAlgorithm;
	}

	public ArcadeDriveAlgorithm getArcadeDriveAlgorithm() {
		return arcadeDriveAlgorithm;
	}
}
