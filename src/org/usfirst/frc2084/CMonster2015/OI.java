/* 
 * Copyright (c) 2014 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc2084.CMonster2015;

import org.usfirst.frc2084.CMonster2015.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	// // CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);
	// Another type of button you can create is a DigitalIOButton, which is
	// a button or switch hooked up to the cypress module. These are useful if
	// you want to build a customized operator interface.
	// Button button = new DigitalIOButton(1);
	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.
	// // TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:
	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());
	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());
	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton arcadeDriveButton;
	public JoystickButton fieldCentricMecanumDriveButton;
	public JoystickButton resetGyroButton;
	public Joystick driveJoystick;
	public JoystickButton sweeperSweepButton;
	public JoystickButton sweeperOffButton;
	public JoystickButton sweeperEjectButton;
	public JoystickButton extendSweeperButton;
	public JoystickButton retractSweeperButton;
	public JoystickButton extendCatcherButton;
	public JoystickButton retractCatcherButton;
	public Joystick secondaryJoystick;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		secondaryJoystick = new Joystick(1);

		retractCatcherButton = new JoystickButton(secondaryJoystick, 6);
		retractCatcherButton.whenPressed(new CatcherRetractCommand());
		extendCatcherButton = new JoystickButton(secondaryJoystick, 8);
		extendCatcherButton.whenPressed(new CatcherExtendCommand());
		retractSweeperButton = new JoystickButton(secondaryJoystick, 5);
		retractSweeperButton.whenPressed(new SweeperRetractCommand());
		extendSweeperButton = new JoystickButton(secondaryJoystick, 7);
		extendSweeperButton.whenPressed(new SweeperExtendCommand());
		sweeperEjectButton = new JoystickButton(secondaryJoystick, 4);
		sweeperEjectButton.whenPressed(new SweeperEjectCommand());
		sweeperOffButton = new JoystickButton(secondaryJoystick, 1);
		sweeperOffButton.whenPressed(new SweeperOffCommand());
		sweeperSweepButton = new JoystickButton(secondaryJoystick, 2);
		sweeperSweepButton.whenPressed(new SweeperSweepCommand());
		driveJoystick = new Joystick(0);

		resetGyroButton = new JoystickButton(driveJoystick, 12);
		resetGyroButton.whenPressed(new ResetGyroCommand());
		fieldCentricMecanumDriveButton = new JoystickButton(driveJoystick, 8);
		fieldCentricMecanumDriveButton.whenPressed(new FieldCentricMecanumDriveCommand());
		arcadeDriveButton = new JoystickButton(driveJoystick, 7);
		arcadeDriveButton.whenPressed(new DriveCommand());

		// SmartDashboard Buttons
		SmartDashboard.putData("Sweeper Extend Command", new SweeperExtendCommand());
		SmartDashboard.putData("Sweeper Retract Command", new SweeperRetractCommand());
		SmartDashboard.putData("Sweeper Sweep Command", new SweeperSweepCommand());
		SmartDashboard.putData("Sweeper Eject Command", new SweeperEjectCommand());
		SmartDashboard.putData("Sweeper Off Command", new SweeperOffCommand());
		SmartDashboard.putData("Catcher Extend Command", new CatcherExtendCommand());
		SmartDashboard.putData("Catcher Retract Command", new CatcherRetractCommand());
		SmartDashboard.putData("Reset Gyro Command", new ResetGyroCommand());
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
	public Joystick getDriveJoystick() {
		return driveJoystick;
	}

	public Joystick getSecondaryJoystick() {
		return secondaryJoystick;
	}
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
