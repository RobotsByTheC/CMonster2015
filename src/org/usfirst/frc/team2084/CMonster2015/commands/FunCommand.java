/* 
 * Copyright (c) 2014 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.commands;

import org.usfirst.frc.team2084.CMonster2015.RobotMap;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * Command that is always running and report debugging values.
 *
 * @author Ben Wolsieffer
 */
public class FunCommand extends Command {

	// private ITG3200 gyro = new ITG3200(Port.kMXP, new DigitalInput(0));

	public FunCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		// Make sure this command still reports data when the
		// robot is disabled.
		setRunWhenDisabled(true);
	}

	/**
	 * Does nothing.
	 */
	@Override
	protected void initialize() {
	}

	/**
	 * Prints out debugging data to the SmartDashboard.
	 */
	@Override
	protected void execute() {

		// Report misc values
		SmartDashboard.putNumber("Gyro Rate", RobotMap.driveSubsystemGyro.getRate());
		SmartDashboard.putNumber("Gyro Angle", RobotMap.driveSubsystemGyro.getAngle());

		// SmartDashboard.putNumber("Gyro X Rate", gyro.getRate(Axis.X));
		// SmartDashboard.putNumber("Gyro Y Rate", gyro.getRate(Axis.Y));
		// SmartDashboard.putNumber("Gyro Z Rate", gyro.getRate(Axis.Z));
		//
		// SmartDashboard.putNumber("Gyro X Angle", gyro.getAngle(Axis.X));
		// SmartDashboard.putNumber("Gyro Y Angle", gyro.getAngle(Axis.Y));
		// SmartDashboard.putNumber("Gyro Z Angle", gyro.getAngle(Axis.Z));

		Accelerometer accel = RobotMap.driveSubsystemAccelerometer;
		SmartDashboard.putNumber("X Acceleration", accel.getX());
		SmartDashboard.putNumber("Y Acceleration", accel.getY());
	}

	/**
	 * This command never finishes.
	 *
	 * @return false
	 */
	@Override
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
	}
}
