/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.commands;

import org.usfirst.frc.team2084.CMonster2015.AnalogGyro;
import org.usfirst.frc.team2084.CMonster2015.Robot;
import org.usfirst.frc.team2084.CMonster2015.RobotMap;
import org.usfirst.frc.team2084.CMonster2015.drive.EncoderGyroMecanumDriveAlgorithm;
import org.usfirst.frc.team2084.CMonster2015.drive.EncoderWheelController;
import org.usfirst.frc.team2084.CMonster2015.drive.Location;

import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * Command that is always running and reports debugging values.
 *
 * @author Ben Wolsieffer
 */
public class LoggingCommand extends Command {

    /**
     * The length of a match in seconds.
     */
    public static final double MATCH_LENGTH = 150;

    private final Accelerometer accelerometer = RobotMap.driveSubsystemAccelerometer;
    private final AnalogGyro gyro = RobotMap.driveSubsystemGyro;
    private final EncoderGyroMecanumDriveAlgorithm<EncoderWheelController<SpeedController>> mecanumDriveAlgorithm = RobotMap.driveSubsystemMecanumDriveAlgorithm;

    public LoggingCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // Make sure this command still reports data when the
        // robot is disabled.
        setRunWhenDisabled(true);
    }

    /**
     * Does nothing.
     */
    @Override
    protected void initialize() {
        // Initialize the encoders enabled state
        SmartDashboard.putBoolean("Encoders Enabled", true);
    }

    /**
     * Prints out debugging data to the SmartDashboard.
     */
    @Override
    protected void execute() {

        // Send location
        Location location = mecanumDriveAlgorithm.getLocation();
        SmartDashboard.putNumber("X Location", location.getX());
        SmartDashboard.putNumber("Y Location", location.getY());

        // Report gyro values
        SmartDashboard.putNumber("Gyro Angle", gyro.getAngle());
        SmartDashboard.putNumber("Gyro Rate", gyro.getRate());

        // Enable or disable the encoders
        Robot.driveSubsystem.setEncodersEnabled(SmartDashboard.getBoolean("Encoders Enabled", true));

        // Report accelerometer values
        SmartDashboard.putNumber("X Acceleration", accelerometer.getX());
        SmartDashboard.putNumber("Y Acceleration", accelerometer.getY());

        // Report remaining match time
        double matchTime = Timer.getMatchTime();
        SmartDashboard.putNumber("Time Remaining", matchTime < 0 ? 0 : (MATCH_LENGTH - matchTime));

        // Report energy and current
        SmartDashboard.putNumber("Total energy (J)", Robot.pdp.getTotalEnergy());
        SmartDashboard.putNumber("Total current (amps)", Robot.pdp.getTotalCurrent());

        // Report sensors
        SmartDashboard.putBoolean("Tote Ejector Extended", Robot.toteLifterSubsystem.isEjectorExtended());
        SmartDashboard.putBoolean("Tote Ejector Retracted", Robot.toteLifterSubsystem.isEjectorRetracted());
        SmartDashboard.putBoolean("Container Hook Raised", Robot.containerHookSubsystem.isRaised());

        // RobotMap.ledController.setPattern(Pattern.BLINK_BLUE);
    }

    /**
     * This command never finishes.
     *
     * @return false
     */
    @Override
    protected boolean isFinished() {
        return false;
    }

    /**
     * Does nothing.
     */
    @Override
    protected void end() {
    }

    /**
     * Does nothing.
     */
    @Override
    protected void interrupted() {
    }
}
