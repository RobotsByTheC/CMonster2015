/* 
 * Copyright (c) 2014 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc2084.CMonster2015.subsystems;

import org.usfirst.frc2084.CMonster2015.RobotMap;
import org.usfirst.frc2084.CMonster2015.drive.ArcadeDriveAlgorithm;
import org.usfirst.frc2084.CMonster2015.drive.FourWheelDriveController;
import org.usfirst.frc2084.CMonster2015.drive.GyroMecanumDriveAlgorithm;
import org.usfirst.frc2084.CMonster2015.drive.WheelController;

import edu.wpi.first.wpilibj.ADXL345_I2C;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.RadianGyro;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TempSensor;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class DriveSubsystem extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	SpeedController frontLeftJaguar = RobotMap.driveSubsystemFrontLeftJaguar;
	SpeedController frontRightJaguar = RobotMap.driveSubsystemFrontRightJaguar;
	SpeedController rearLeftJaguar = RobotMap.driveSubsystemRearLeftJaguar;
	SpeedController rearRightJaguar = RobotMap.driveSubsystemRearRightJaguar;
	Encoder rearRightEncoder = RobotMap.driveSubsystemRearRightEncoder;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	RadianGyro steeringGyro = RobotMap.driveSubsystemSteeringGyro;
	TempSensor steeringGyroTemp = RobotMap.driveSubsystemSteeringGyroTemp;
	ADXL345_I2C accelerometer = RobotMap.driveSubsystemAccelerometer;
	private final WheelController frontLeftWheel = new WheelController(frontLeftJaguar);
	private final WheelController frontRightWheel = new WheelController(frontRightJaguar);
	private final WheelController rearLeftWheel = new WheelController(rearLeftJaguar);
	private final WheelController rearRightWheel = new WheelController(rearRightJaguar);
	private final FourWheelDriveController<WheelController> driveController = new FourWheelDriveController<>(frontLeftWheel, frontRightWheel, rearLeftWheel, rearRightWheel);
	private final GyroMecanumDriveAlgorithm mecanumDriveAlgorithm = new GyroMecanumDriveAlgorithm(driveController, RobotMap.driveSubsystemSteeringGyro);
	private final ArcadeDriveAlgorithm arcadeDriveAlgorithm = new ArcadeDriveAlgorithm(driveController);

	public DriveSubsystem() {
		frontRightWheel.setInverted(true);
		rearRightWheel.setInverted(true);
	}

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		steeringGyro.setPIDSourceParameter(PIDSource.PIDSourceParameter.kAngle);
	}

	public GyroMecanumDriveAlgorithm getMecanumDriveAlgorithm() {
		return mecanumDriveAlgorithm;
	}

	public ArcadeDriveAlgorithm getArcadeDriveAlgorithm() {
		return arcadeDriveAlgorithm;
	}
}
